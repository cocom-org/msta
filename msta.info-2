This is msta.info, produced by makeinfo version 4.0 from
/tmp/sgmltmp.msta28191.info.2.

   \input texinfo


File: msta.info,  Node: MSTA Usage,  Next: Future of MSTA development,  Prev: Implementation,  Up: Top

MSTA Usage
**********




     MSTA(1)                    User Manuals                   MSTA(1)
     
     
     NAME
            msta - syntax description translator
     
     SYNOPSIS
            msta  [  -d  -define  -l  -line  -t  -trace -v -verbose -b
            file_prefix -p sym_prefix -h -help --help  -w  -c++  -enum
            -no-enum -pattern-equiv -no-pattern-equiv -look-ahead num-
            ber -la number  -lr  -no-lr  -lalr-optimization  -no-lalr-
            optimization  -regular-optimization  -no-regular-optimiza-
            tion -split-lr-sets -no-split-lr-sets -yacc-error-recovery
            -local-error-recovery  -minimal-error-recovery -yacc-input
            -no-yacc-input -strict  -no-strict  -yacc-file-names  -no-
            yacc-file-names  -o  name -y -yacc -full-lr-set -lr-situa-
            tion-context -removed-lr-sets  -expand  -no-expand  -time]
            specification-file
     
     DESCRIPTION
            MSTA  reads input grammar which is described in specifica-
            tion file and generates parser for it.  MSTA  can  process
            any  POSIX YACC grammar and generates equivalent parser in
            the sence of POSIX standard.  But MSTA can do  many  addi-
            tional  things:  generation of more safe error recovery or
            much better error recovery,  better  output  of  generated
            parser   description,  generation  of  fast  LALR(k)-  and
            LR(k)-grammar parser with acceptable  space  requirements,
            generation  of  scanners described as context-free grammar
            (CFG), and so on.  The specification file must have suffix
            `.y'
     
            The  generated  code  consists  of  optional interface and
            implementation files and optional description file  having
            the  same  names  as  one of specification file and corre-
            spondingly suffixes `.h' (if option -d or -c++  is  given)
            and  `.c'  (C  code)  or  `.cpp'  (C++ code) and `.output'
            (description file).  If MSTA runs in YACC regime, the cor-
            responding  files  will be `y.tab.h' (if option -d or -c++
            is given) and `y.tab.c' (C code) or `y.tab.cpp' (C++ code)
            and `y.output' (description file).
     
            Full documentation of MSTA is in MSTA User's manual.
     
     OPTIONS
            The options which are known for MSTA and YACC are:
     
            -d     Create  the  interface file.  By default the inter-
                   face file is not generated.
     
            -l     Insert user's original code into  generated  parser
                   without  `#line'  constructs.  By default construc-
                   tions `#line' are always generated.
     
            -t     Permit compilation of debugging code  in  the  code
                   file  (tracing of the parser work).  Runtime debug-
                   ging statements are always contained in the parser,
     
     
     
     COCOM                       5 SEP 1999                          1
     
     
     
     
     
     MSTA(1)                    User Manuals                   MSTA(1)
     
     
                   but  by  default conditional compilation directives
                   prevent their  compilation.   This  option  defines
                   macro  `YYDEBUG'  as  1 (by default its value is 0)
                   and as consequence  the  debugging  statements  are
                   processed.
     
            -v     Create a file containing description of the parser.
     
            -b file_prefix
                   Use file_prefix instead of `y' as  the  prefix  for
                   all  output filenames when YACC regime of generated
                   file names is on.
     
            -p sym_prefix
                   Use sym_prefix instead of yy as the prefix for  all
                   external  names  (i.e.  functions yyparse , yylex ,
                   and yyerror , and the variables yylval ,  yychar  ,
                   and yydebug ) produced by MSTA.
     
            Additional options which are known only for MSTA are:
     
            -define
                   This is synonym of option `-d'
     
            -line  This is synonym of option `-l'
     
            -trace This is synonym of option `-t'
     
            -verbose
                   This is synonym of option `-v'
     
            -h, -help, --help
                   These options result in that only brief description
                   of options is output into stderr.  The same  result
                   can be achieved by calling MSTA without any options
                   and arguments.
     
            -w     No  any  warning  messages  are   generated,   e.g.
                   repeated  description  of type, value, and priority
                   of  token  or   terminal,   repeated   construction
                   `%start' and many others.
     
            -c++   Output  of  C++  code  instead  of C code (which is
                   default).
     
            -enum  Generate token constants as enumeration instead  of
                   macro.
     
            -no-enum
                   Generate   token   constants   as  macro  (this  is
                   default).
     
            -pattern-equiv
                   Equivalent  patterns  are  denoted  by   the   same
     
     
     
     COCOM                       5 SEP 1999                          2
     
     
     
     
     
     MSTA(1)                    User Manuals                   MSTA(1)
     
     
                   nonterminal  (by  default).  Sometimes this results
                   in dramatic reducing conflicts  when  complex  pat-
                   terns are used.
     
            -no-pattern-equiv
                   Even  equivalent  patterns are denoted by different
                   nonterminals and are expanded  into  the  different
                   set of rules
     
            -look-ahead number, -la number
                   Determine  maximal  length of look-ahead when LR(k)
                   and LALR(k) generated parser.  This does  not  mean
                   that MSTA in each situation and for each input will
                   look ahead on  given  number  tokens.   MSTA  looks
                   ahead only on minimal number of tokens required for
                   resolution of a conflict.   The  default  value  of
                   maximal look ahead is 1.
     
            -lr    Input  grammar is considered to be a LR(k)-grammar.
     
            -no-lr Input grammar is considered to be  a  LALR(k)-gram-
                   mar.  This is default.
     
            -lalr-optimization
                   If   the  input  grammar  is  considered  to  be  a
                   LR(k)-grammar, MSTA will make  LALR(k)-optimization
                   after  building  LR(k)-parser.   It means that MSTA
                   will extract  LALR(k)-parts  of  LR(k)-grammar  and
                   will represent them by addequate LALR-sets.  If the
                   input LR(k)-grammar is "almost" a  LALR(k)-grammar,
                   MSTA  can descrease size of the generated parser in
                   several  times.   If  the  input   grammar   is   a
                   LALR(k)-grammar,  MSTA  will create LALR(k)-parser.
                   This option is default when option `-lr' is  given.
     
            -no-lalr-optimization
                   When  option  `-lr'  is  given,  MSTA does not make
                   LALR-optimization.
     
            -regular-optimization
                   After building LALR-sets or  LR-sets  and  optional
                   LALR-optimization,  MSTA  makes  extracting regular
                   parts of input grammar and implement them  by  ade-
                   quate  methods  (deterministic  finite  automaton).
                   This decreases number of final states in the gener-
                   ated  parser,  speeds  up  the  parser, but sigthly
                   increases the parser size because some actions will
                   be present in several examplars in the parser.  The
                   more regular parts in the input grammar, the better
                   this method works.  By default this option is on.
     
            -no-regular-optimization
                   Disable the regular optimizations.
     
     
     
     
     COCOM                       5 SEP 1999                          3
     
     
     
     
     
     MSTA(1)                    User Manuals                   MSTA(1)
     
     
            -split-lr-sets
                   Splitting  LR-sets  during  regular optimization in
                   order to extract the most of  regular  parts  (only
                   when  option  `-regular-optimization'  is  on).  By
                   default this option is on if `%free_format' is pre-
                   sent in the specification file.
     
            -no-split-lr-sets
                   Option is opposite to the previous one.  By default
                   this option is on if `%free_format'  is  absent  in
                   the specification file.
     
            -yacc-error-recovery
                   The generated parser will use error recover accord-
                   ing to Posix YACC standard.  This error recovery is
                   used by default.
     
            -local-error-recovery
                   The  generated  parser  will  use sligthly modified
                   error recovery method.  This method is  more  safe.
                   It  is  guaranteed  that  this  method  can  not be
                   cycled.
     
            -minimal-error-recovery
                   The generated parser will use a minimal cost  error
                   recovery where the cost is overall number of tokens
                   ignored.  It is guaranteed that this method can not
                   be cycled.  This method is expensive because it may
                   save  many  input   tokens,   parser   states   and
                   attributes.
     
            -yacc-input
                   Only Posix YACC input can be used as input grammar.
     
            -no-yacc-input
                   All input grammar features of  MSTA  can  be  used.
                   This option is default.
     
            -yacc-file-names
                   MSTA  output  file names are generated according to
                   Posix YACC ( y.output , y.tab.c , y.tab.h).
     
            -strict
                   Use only strict POSIX YACC input (this option is in
                   action  only   when -yacc-input ) not SYSTEM V one.
                   Errors are output when nonstrict features are used.
                   These  features  are usage of ';' after definitions
                   and C/C++ code insertions and usage of a token  and
                   a  literal  in  %type clauses as before and after a
                   description of the token  and  the  literal.   This
                   option is on by default.
     
            -no-strict
                   This  option  is in action only when -yacc-input is
     
     
     
     COCOM                       5 SEP 1999                          4
     
     
     
     
     
     MSTA(1)                    User Manuals                   MSTA(1)
     
     
                   on.  Only warnings about non strict POSIX YACC fea-
                   tures usage are output.
     
            -no-yacc-file-names
                   Output files will have the same name and suffixes (
                   .h , .c , and .output ).   This  option  is  on  by
                   default.
     
            -o     Specify names of output files (header file name.h ,
                   code file name.c , description file name.output
     
            -y, -yacc
                   Emulate Posix YACC.   It  means  that  the  options
                   `-yacc-input'  , `-lalr' , `-yacc-error-recovery' ,
                   and `-yacc-file-names' are on,  and  -c++  is  off.
                   This  option  is  useful  with  other options, e.g.
                   options `-lr' and `-y' means also  `-yacc-input'  ,
                   `-yacc-error-recovery' , and `-yacc-file-names'.
     
            -full-lr-set
                   Write all LR-situations (besides essential ones) of
                   LR-sets into a file containing description  of  the
                   parser  (the  option  acts only with option `-v' ).
                   Sometimes it is  useful  for  better  understanding
                   conflicts.   But  in this case the description file
                   can be significantly bigger.
     
            -lr-situation-context
                   Write context of LR-situations into description  of
                   the  parser  (the option acts only with option `-v'
                   ).  Sometimes it is useful for better understanding
                   conflicts.   But  in this case the description file
                   can be huge espicially for LR(k)- and LALR(k)-gram-
                   mar  when  k > 1 or when with option `-full-lr-set'
                   parser generation speed because classic  method  of
                   LR-,  LALR-sets  is  used  instead  of fast DeRemer
                   method.  By default this option is off.
     
            -removed-lr-sets
                   Write LR-sets removed  during  conflict  resolution
                   and  regular  optimization  into description of the
                   parser (the option acts only with option -v ).   By
                   default such unchievable LR-sets are not present in
                   the description file.
     
            -expand
                   Attributes and states stacks in the parser will  be
                   expandable (this is default).
     
            -no-expand
                   Attributes  and states stacks in the parser will be
                   not expandable.
     
            -time  Output detail time statistics of MSTA work  on  its
     
     
     
     COCOM                       5 SEP 1999                          5
     
     
     
     
     
     MSTA(1)                    User Manuals                   MSTA(1)
     
     
                   basic passes and optimizations.
     
     FILES
            file.y
                   MSTA specification file
            file.c or y.tab.c
                   generated C implementation file
            file.cpp or y.tab.cpp
                   generated C++ implementation file
            file.h or y.tab.h
                   generated interface file
            file.output or y.output
                   generated interface file
            There are no any temporary files used by MSTA.
     
     ENVIRONMENT
            There  are  no  environment  variables  which  affect MSTA
            behavior.
     
     DIAGNOSTICS
            MSTA diagnostics is self-explanatory.
     
     AUTHOR
            Vladimir N. Makarov, vmakarov@users.sourceforge.net
     
     SEE ALSO
            oka(1), sprut(1), nona(1), shilka(1).  SHILKA manual.
     
     BUGS
            Please, report bugs to cocom-bugs@lists.sourceforge.net.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     COCOM                       5 SEP 1999                          6


File: msta.info,  Node: Future of MSTA development,  Next: Appendix 1 - Syntax of MSTA description file (YACC description),  Prev: MSTA Usage,  Up: Top

Future of MSTA development
**************************

   Frequently LR(k)-grammars are not sufficient to describe modern
programming languages adequately.  More power grammars would be useful
for this.  It could be LR-regular grammars, backtracking, or something
else.


File: msta.info,  Node: Appendix 1 - Syntax of MSTA description file (YACC description),  Next: Appendix 2 - Example of MSTA scanner description file,  Prev: Future of MSTA development,  Up: Top

Appendix 1 - Syntax of MSTA description file (YACC description)
***************************************************************

     %token IDENTIFIER_OR_LITERAL /* identifier (including '.')
                                     and literal */
     %token C_IDENTIFIER          /* identifier followed by a : */
     %token NUMBER                /* [0-9][0-9]* */
     %token STRING                /* "..." of C syntax */
     %token CODE_INSERTION        /* { ... } */
     %token YACC_CODE_INSERTION   /* %{ ... %} */
     %token ADDITIONAL_C_CODE     /* code after second %% */
     
     /* Reserved words : %type=>TYPE %left=>LEFT, etc.  The attributes of
        the following tokens are not defined and not used. */
     
     %token   LEFT RIGHT NONASSOC TOKEN PREC LA TYPE START
              UNION LOCAL IMPORT EXPORT SCANNER EXPECT
     %token   PERCENTS             /* the %% mark */
     %token   SEMICOLON            /* ; */
     %token   BAR                  /* | */
     %token   SLASH                /* / */
     %token   STAR                 /* * */
     %token   PLUS                 /* + */
     %token   LESS                 /* < */
     %token   GREATER              /* > */
     %token   LEFT_PARENTHESIS     /* ) */
     %token   RIGHT_PARENTHESIS    /* ( */
     %token   LEFT_SQUARE_BRACKET  /* [ */
     %token   RIGHT_SQUARE_BRACKET /* ] */
     %token   AT                   /* @ */
     %token   RANGE                /* - */
     %token   RANGE_NO_LEFT_BOUND  /* <- */
     %token   RANGE_NO_RIGHT_BOUND /* -> */
     %token   RANGE_NO_LEFT_RIGHT_BOUNDS  /* <-> */
     
     /*       8-bit character literals stand for themselves; */
     /*       tokens have to be defined for multibyte characters */
     
     %start   description
     
     %%
     
     description  : definitions PERCENTS rules tail
                  ;
     
     tail  : /* empty */
           | ADDITIONAL_C_CODE
           ;
     
     definitions  : /* empty */
                  | definitions  definition  definition_tail
                  ;
     
     definition_tail :
                     | definition_semicolon_list
                     ;
     
     definition_semicolon_list : SEMICOLON
                               | definition_semicolon_list SEMICOLON
                               ;
     
     definition   : START
                    IDENTIFIER_OR_LITERAL
                  | UNION   CODE_INSERTION
                  | YACC_CODE_INSERTION
                  | LOCAL  CODE_INSERTION
                  | IMPORT CODE_INSERTION
                  | EXPORT CODE_INSERTION
                  | SCANNER
                  | EXPECT NUMBER
                  | symbol_list_start tag symbol_list
                  ;
     
     symbol_list_start : TOKEN
                       | LEFT
                       | RIGHT
                       | NONASSOC
                       | TYPE
                       ;
     
     tag : /* empty */
         | LESS  IDENTIFIER_OR_LITERAL  GREATER
         ;
     
     symbol_list : symbol
                 | symbol_list  symbol
                 ;
     
     symbol  : IDENTIFIER_OR_LITERAL
             | IDENTIFIER_OR_LITERAL  NUMBER
             ;
     
     /* Rule section */
     
     rules : rule  semicolons
           | rules  rule  semicolons
           ;
     
     rule : C_IDENTIFIER pattern
          ;
     
     pattern : alternatives
             ;
     
     alternatives : alternatives  BAR  alternative
                  | alternative
                  ;
     
     alternative : sequence prec_la
                 | sequence prec_la SLASH sequence prec_la
                 ;
     
     sequence : /* empty */
              | sequence  sequence_element
              ;
     
     sequence_element : nonamed_sequence_element
                      | nonamed_sequence_element AT IDENTIFIER_OR_LITERAL
                      ;
     
     nonamed_sequence_element
        : LEFT_SQUARE_BRACKET
          pattern  RIGHT_SQUARE_BRACKET
        | unit  STAR
        | unit  PLUS
        | CODE_INSERTION  code_insertion_tail
        | unit
        ;
     
     code_insertion_tail
        :
        | code_insertion_semicolon_list
        ;
     
     code_insertion_semicolon_list
       : SEMICOLON
       | code_insertion_semicolon_list SEMICOLON
       ;
     
     unit : LEFT_PARENTHESIS
            pattern  RIGHT_PARENTHESIS
          | IDENTIFIER_OR_LITERAL
          | STRING
          | IDENTIFIER_OR_LITERAL  RANGE  IDENTIFIER_OR_LITERAL
          | IDENTIFIER_OR_LITERAL  RANGE_NO_LEFT_BOUND  IDENTIFIER_OR_LITERAL
          | IDENTIFIER_OR_LITERAL  RANGE_NO_RIGHT_BOUND IDENTIFIER_OR_LITERAL
          | IDENTIFIER_OR_LITERAL  RANGE_NO_LEFT_RIGHT_BOUNDS
            IDENTIFIER_OR_LITERAL
          ;
     
     prec_la : /* empty */
             | PREC  IDENTIFIER_OR_LITERAL
             | PREC  IDENTIFIER_OR_LITERAL  CODE_INSERTION  code_insertion_tail
             | LA NUMBER
             | PREC  IDENTIFIER_OR_LITERAL   LA NUMBER
             | LA NUMBER   PREC  IDENTIFIER_OR_LITERAL
             | LA NUMBER  CODE_INSERTION code_insertion_tail
             | PREC IDENTIFIER_OR_LITERAL  LA NUMBER
                    CODE_INSERTION code_insertion_tail
             | LA NUMBER  PREC IDENTIFIER_OR_LITERAL
                    CODE_INSERTION code_insertion_tail
            ;
     
     semicolons : /* empty */
                | semicolons  SEMICOLON
                ;


File: msta.info,  Node: Appendix 2 - Example of MSTA scanner description file,  Next: Appendix 3 - Run of MSTA on the previous description file,  Prev: Appendix 1 - Syntax of MSTA description file (YACC description),  Up: Top

Appendix 2 - Example of MSTA scanner description file
*****************************************************

     %local {
     
     #include <stdio.h>
     #include <string.h>
     
     #define IDENTIFIER 300
     #define NUMBER     301
     #define STRING     302
     
     
     static FILE *input;
     
     static char lexema [100];
     static int lexema_index;
     static int lineno;
     
     }
     
     %scanner
     %%
     program :
             | program {lexema_index=0;} lexema
             ;
     lexema : identifier {lexema [lexema_index++] = 0;return IDENTIFIER;}
            | number     {lexema [lexema_index++] = 0;return NUMBER;}
            | string     {lexema [lexema_index++] = 0;return STRING;}
            | comment
            | space
            | error
            ;
     
     space : ' ' | '\t' | '\n' {lineno++;}
     
     identifier : identifier (letter | digit)
                | letter
                ;
     
     letter :  ('a'-'z' | 'A' - 'Z') {lexema[lexema_index++] = yysprev_char;}
            ;
     
     digit :  '0' - '9'  {lexema[lexema_index++] = yysprev_char;}
           ;
     
     number : number digit
            | digit
            ;
     
     string : '"' (('\1' -> '"' | '"' <- '\377')
                            {lexema[lexema_index++] = yysprev_char;} ) * '"'
            ;
     
     comment : "/*" '\0' - '\377' * "*/"  /* Conflict shift/reduce on / after * */
             ;
     
     %%
     
     #ifdef __cplusplus
     
     class scanner: public yyscanner
     {
     public:
       inline int yyslex (void);
       void yyserror (const char *message);
     };
     
     int scanner::yyslex (void)
     {
       return fgetc (input);
     }
     
     void scanner::yyserror (const char *message)
     {
       fprintf (stderr, "illegal code %d on line %d\n", yyschar, lineno);
     }
     
     static scanner *scan_ptr;
     
     #else
     
     int yyslex (void)
     {
       return fgetc (input);
     }
     
     yyserror (const char *message)
     {
       fprintf (stderr, "illegal code %d on line %d\n", yyschar, lineno);
     }
     #endif
     
     void
     main (int argc, char **argv)
     {
       int token;
       int error_flag;
     
       if (argc != 2)
         {
           fprintf (stderr, "Usage: lex file\n");
           exit (1);
         }
       if (strcmp (argv[1], "-") == 0)
         input = stdin;
       else
         input = fopen (argv[1], "rb");
       if (input == NULL)
         {
           perror (argv[1]);
           exit (1);
         }
     #ifdef __cplusplus
       scan_ptr = new yyscanner (error_flag);
       if (error_flag)
         {
           fprintf (stderr, "no memory for object scanner");
           exit (1);
         }
       lineno = 1;
       while ((token = scan_ptr->yylex ()) > 0)
         fprintf (stderr, "%d - %s\n", token, lexema);
     #else
       lineno = 1;
       yylex_start (&error_flag);
       if (error_flag)
         {
           fprintf (stderr, "no memory for scanner arrays");
           exit (1);
         }
       while ((token = yylex ()) > 0)
         fprintf (stderr, "%d - %s\n", token, lexema);
     #endif
       exit (0);
     }


File: msta.info,  Node: Appendix 3 - Run of MSTA on the previous description file,  Prev: Appendix 2 - Example of MSTA scanner description file,  Up: Top

Appendix 3 - Run of MSTA on the previous description file
*********************************************************

   This output is produced on Compaq Aero 486 SX/25 with 12Mb under
Linux 2.0.29.
     bash$ msta -time lex.y
       parser time            -- 0.02sec
       semantic analyzer time -- 0.11sec
       Look ahead is 1 token
           Creating LR(0)-sets -- 0.05sec
           Conflicts processing -- 0.10sec
         create LALR-sets only with needed contexts -- 0.10sec
           marking LR-sets with used attributes -- 0.01sec
           splitting LR-sets for regular optimization -- 0.01sec
           transforming LR-graph -- 0.04sec
           removal unused nonterm. LR-arcs & marking unreachable LR-sets -- 0.00sec
           marking semantically pushed LR-sets -- 0.00sec
           making concordance between pushed LR-sets -- 0.00sec
           making concordance between pushed LR-set attributes -- 0.00sec
           evaluating popped LR-sets & attributes of regular arcs -- 0.02sec
           stack displacement for used attributes evaluation -- 0.02sec
           searching for regular arcs equivalence -- 0.03sec
         all regular optimization -- 0.14sec
         making parser look-ahead trie -- 0.02sec
         making token equivalence classes -- 0.03sec
       all generation of internal parser representation -- 0.30sec
       Real look ahead is 1 token
       5 shift/reduce conflicts.
           translate vector creation & output -- 0.05sec
           action table creation & output -- 0.02sec
           nonterminal goto table creation & output -- 0.01sec
           pushed states flag table creation & output -- 0.00sec
           popped attributes number table creation & output -- 0.01sec
           token name table creation & output -- 0.03sec
         creation, compacting, output of tables -- 0.14sec
       all parser output -- 0.25sec
     overall time -- 0.75sec


